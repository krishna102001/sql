-- temporary table


-- LOCAL TEMPORARY TABLE --
CREATE TABLE #EMPLOYEE(  -- IF THERE IS SINGLE HASH(#) THEN IT IS A LOCAL TEMPORARY TABLE 
    ID INT PRIMARY KEY NOT NULL,
    NAME NVARCHAR(20) NOT NULL,
)

INSERT INTO #EMPLOYEE VALUES(1,'KRISHNA')
INSERT INTO #EMPLOYEE VALUES(2,'SHUBHAM')
INSERT INTO #EMPLOYEE VALUES(3,'ABHINAV')

SELECT * FROM #EMPLOYEE
-- IT CAN ACCESS BY THE SAME USER ONLY , NO OTHER USER CAN ACCESS IT .
-- ANOTHER USER CAN CREATE THE SAME NAME OF LOCAL TEMPORARY TABLE IT WILL DOES NOT CREATE THE CONFLICT BETWEEN THE TWO TABLE

SELECT [NAME] FROM tempdb..sysobjects WHERE NAME like '#EMPLOYEE' 
-- IF WE CLOSED THE SERVER IT WILL AUTOMATICALLY DROP THE TEMPORARY TABLE
-- IF TEMPORARY TABLE IS CREATED IN STORED PROCEDURE THEN IT WILL AUTOMATICALLY GET DROP AFTER THE EXECUTION OF STORED PROCEDURE

CREATE PROCEDURE SP_TEMP_TABLE
AS 
BEGIN
    CREATE TABLE #EMPLOYEE1(  -- IF THERE IS SINGLE HASH(#) THEN IT IS A LOCAL TEMPORARY TABLE 
    ID INT PRIMARY KEY NOT NULL,
    NAME NVARCHAR(20) NOT NULL,
    )   

    INSERT INTO #EMPLOYEE1 VALUES(1,'KRISHNA')
    INSERT INTO #EMPLOYEE1 VALUES(2,'SHUBHAM')
    INSERT INTO #EMPLOYEE1 VALUES(3,'ABHINAV')

    SELECT * FROM #EMPLOYEE1
END

EXECUTE SP_TEMP_TABLE
SELECT * FROM #EMPLOYEE1 -- IT WILL GIVE ERROR INVALID OBJECT NAME #EMPLOYEE1


-- GLOBAL TEMPORARY TABLE --

CREATE TABLE ##EMPLOYEE( -- DOUBLE HASH(##) MEANS IT IS GLOBAL TEMPORARY TABLE AND ANY USER CAN ACCESS IT 
    ID INT PRIMARY KEY NOT NULL,
    NAME NVARCHAR(20) NOT NULL
)

INSERT INTO ##EMPLOYEE VALUES(1,'KRISHNA')
INSERT INTO ##EMPLOYEE VALUES(2,'SHUBHAM')
INSERT INTO ##EMPLOYEE VALUES(3,'ABHINAV')

SELECT * FROM ##EMPLOYEE