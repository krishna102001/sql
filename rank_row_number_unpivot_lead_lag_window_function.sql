-- OVER CLAUSE  COMBINED WITH PARTITION BY IS USED TO BREAKUP THE DATA INTO PARTITION 

-- SYNTAX
-- FUNCTION(...) OVER (PARTITION BY COL1,COL2,...)

-- COUNT(GENDER) OVER (PARTITION BY GENDER)

SELECT Name,Salary,Employees.Gender,Gender.GENDERTOTAL,Gender.AVGSAL,Gender.MINSAL,Gender.MAXSAL FROM Employees 
INNER JOIN (
    SELECT Gender,COUNT(*) AS GENDERTOTAL,
    AVG(Salary) AS AVGSAL,
    MIN(Salary) AS MINSAL,
    MAX(Salary) AS MAXSAL FROM Employees
    GROUP BY Gender
) AS Gender ON Gender.Gender = Employees.Gender

-- ABOVE ONE CAN ACHIEVE BY USING OVER CLAUSE

SELECT Name,Salary,Gender, 
COUNT(Gender) OVER (PARTITION BY GENDER) AS GENDERTOTAL, 
AVG(Salary) OVER (PARTITION BY GENDER) AS AVGSAL,
MIN(Salary) OVER (PARTITION BY GENDER)  AS MINSAL,
MAX(Salary) OVER (PARTITION BY GENDER)  AS MAXSAL FROM Employees


-- ROW_NUMBER 
-- 1. ORDER BY CLAUSE IS REQUIRED
-- 2. PARTITION BY CLAUSE IS OPTIONAL 
-- IT DIVIDE THE DATA INTO PARTICULAR ROW NUMBER GIVEN IF TOTAL DATA IS 10  THEN IT WILL PARTITION IT INTO 10 ROWS . IT DEPEND ON WHAT WE HAVE PASSED IN ORDER BY 

-- SYNTAX
-- ROW_NUMBER() OVER (PARTITON BY ... ORDER BY COL1,COL2,COL3,...)
SELECT Name,Gender,Salary, ROW_NUMBER() OVER (ORDER BY Gender) AS ROW_NUMBER FROM Employees

SELECT Name,Gender,Salary, ROW_NUMBER() OVER (PARTITION BY Gender ORDER BY Gender) AS ROW_NUMBER FROM Employees

WITH EMPLOYEECTE 
AS
(
    SELECT * , ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) AS ROW_NUMBER FROM Employees
)
DELETE FROM EMPLOYEECTE WHERE ROW_NUMBER > 1

-- RANK AND DENSED_RANK
-- RANK FUNCTION SKIPS RANKINGS IF THERE IS A TIE WHERE AS DENSE_RANK WILL NOT 
-- ORDER BY CLAUSE IS REQUIRED
-- PARTITION BY CLAUSE IS OPTIONAL
-- RANKING DEPEND ON ORDER BY FUNCTION

-- RANK() OVER (PARTITION BY COL1,COL2,... ORDER BY COL1,COL2,COL3,...)
-- DENSE_RANK() OVER (PARTITION BY COL1,COL2,... ORDER BY COL1,COL2,COL3,...)
SELECT Name,Gender,Salary,
RANK() OVER (ORDER BY Salary DESC) AS [RANK],
DENSE_RANK() OVER (ORDER BY Salary DESC) AS [DENSE_RANK]
FROM Employees

WITH RESULT AS(
    SELECT Name,Gender,Salary,
    RANK() OVER (ORDER BY Salary DESC) AS [RANK]
    FROM Employees
)
SELECT TOP 1 Salary FROM RESULT WHERE [RANK] = 2

WITH RESULT AS(
    SELECT Name,Gender,Salary,
    DENSE_RANK() OVER (ORDER BY Salary DESC) AS [RANK]
    FROM Employees
)
SELECT TOP 1 Salary FROM RESULT WHERE [RANK] = 1

SELECT Name,Gender,Salary,
ROW_NUMBER() OVER (ORDER BY Salary DESC) AS ROW_NUMBER,
RANK() OVER (ORDER BY Salary DESC) AS RANK,
DENSE_RANK() OVER (ORDER BY Salary DESC) AS DENSE_RANK FROM Employees


-- RUNNING TOTAL

SELECT Name,Gender,SUM(Salary) OVER (ORDER BY ID) AS RUNNINGTOATL FROM Employees
SELECT Name,Gender,SUM(Salary) OVER (PARTITION BY Gender ORDER BY ID) AS RUNNINGTOATL FROM Employees

-- NTILE // IT DIVIDE THE ROWS INTO SPECIFIED NO. OF GROUPS 
-- IF THE NO. OF ROW IS NOT DIVISBLE BY NO. OF GROUPS THEN WE MAY HAVE GROUPS OF TWO DIFFERENT SIZE 
-- ORDER BY CLAUSE IS REQUIRED 
-- PARTITION BY CLAUSE IS OPTIONAL

-- SYNTAX
-- NTILE(NO. OF GRUP) OVER (PARTITION BY COL1,COL2,... ORDER BY COL1,COL2,..)

SELECT Name,Gender,Salary,NTILE(2) OVER (ORDER BY Salary) AS NTILE FROM Employees

SELECT Name,Gender,Salary,NTILE(11) OVER (ORDER BY Salary) AS NTILE FROM Employees

-- LEAD AND LAG FUNCTION 
-- ORDER BY CLAUSE IS REQUIRED
-- PARTITION BY CLAUSE IS OPTIONAL

-- SYNTAX
-- LEAD(COLUMN_NAME, OFFSET, DEFAULT VALUE) OVER (PARTITION BY COL1,COL2,... ORDER BY COL1,COL2,..)
-- LAG(COLUMN_NAME, OFFSET, DEFAULT VALUE) OVER (PARTITION BY COL1,COL2,... ORDER BY COL1,COL2,..)

SELECT Name,Gender,Salary,LEAD(Salary,1,1) OVER (ORDER BY Salary) AS LEAD FROM Employees
SELECT Name,Gender,Salary,LAG(Salary,2,-1) OVER (ORDER BY Salary) AS LEAD FROM Employees

-- FIRST_VALUE FUNCTION 
-- RETRIEVES THE FIRST VALUE OF COLUMN
-- ORDER BY CLAUSE IS REQUIRED
-- PARTITION BY CLAUSE IS OPTIONAL

-- SYNTAX
-- FIRST_VALUE(COLUMN_NAME) OVER (PARTITION BY COL1,COL2,... ORDER BY COL1,COL2,..)
SELECT Name,Gender,Salary,FIRST_VALUE(Salary) OVER (ORDER BY Salary DESC) AS FIRST_VALUE FROM Employees

SELECT Name,Gender,Salary,FIRST_VALUE(Name) OVER (PARTITION BY Gender ORDER BY Salary DESC) AS FIRST_VALUE FROM Employees

-- WINDOW FUNCTIONS
-- THERE ARE DIFFERENT CATEGORIES OF FUNCTIONS
-- 1. AGGREGATE FUNCTION :- AVG,SUM,MAX,MIN,COUNT,ETC 
-- 2. RANKING FUNCTIONS :- RANK, DENSE_RANK,ROW_NUMBER ETC 
-- 3. ANALYTIC FUNCTION :- LEAD, LAG, FIRST_VALUE, LAST_VALUE ETC 

-- ROWS OR RANGE CLAUSE 

-- SYNTAX 
-- ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW 

SELECT Name, Gender,Salary,
AVG(Salary) OVER (ORDER BY Salary ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS AVGSAL,
MIN(Salary) OVER (ORDER BY Salary ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS MINSAL,
MAX(Salary) OVER (ORDER BY Salary ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS MAXSAL
FROM Employees

SELECT Name, Gender,Salary,
AVG(Salary) OVER (ORDER BY Salary ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS AVGSAL,
MIN(Salary) OVER (ORDER BY Salary ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS MINSAL,
MAX(Salary) OVER (ORDER BY Salary ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS MAXSAL
FROM Employees

--COMPUTING AVG SALARY BY CURRENT ROW, 1 ROW PRECEDING AND 1 ROW FOLLOWING
SELECT Name, Gender,Salary,
AVG(Salary) OVER (ORDER BY Salary ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS AVGSAL,
MIN(Salary) OVER (ORDER BY Salary ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS MINSAL,
MAX(Salary) OVER (ORDER BY Salary ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS MAXSAL
FROM Employees

-- LAST VALUE 
-- ORDER BY CLAUSE IS REQUIRED
-- PARTITION BY CLAUSE IS OPTIONAL
-- ROWS OR RANGE CLAUSE IS OPTIONAL BUT FOR IT TO WORK CORRECTLY YOU MAY HAVE TO EXPLICITY SPECIFY A VALUE

-- SYNTAX
-- LAST_VALUE(COLUMN_NAME) OVER (PARTITION BY COL1,COL2,... ORDER BY COL1,COL2,.. ROW OR RANGE)
SELECT Name,Gender,Salary,LAST_VALUE(Name) OVER (ORDER BY Salary ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_VALUE FROM Employees

SELECT Name,Gender,Salary,LAST_VALUE(Name) OVER (PARTITION BY Gender ORDER BY Salary ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_VALUE FROM Employees

-- unpivot 
-- PIVOT OPERATOR CHANGE THE ROWS INTO COLUMN AND UNPIVOT CHANGE THE COLUMN INTO ROWS
-- Create Table tblProductSales
-- (
--  SalesAgent nvarchar(50),
--  India int,
--  US int,
--  UK int
-- )
-- Go

-- Insert into tblProductSales values ('David', 960, 520, 360)
-- Insert into tblProductSales values ('John', 970, 540, 800)
-- Go
SELECT SalesAgent, Country,SalesAmount FROM tblProductSales
UNPIVOT(
    SalesAmount 
    FOR Country IN (India, US, UK)
) as pivotexample

-- SELECT SalesAgent, India, US, UK FROM tblProductSales
-- PIVOT(
--     SUM(SalesAmount)
--     FOR Country IN (India,US,UK)
-- )AS PIVOTTABLE
