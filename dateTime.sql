-- SELECT GETDATE()
-- SELECT CURRENT_TIMESTAMP
-- SELECT SYSDATETIME()
-- SELECT SYSDATETIMEOFFSET()
-- SELECT SYSUTCDATETIME()

-- CREATE TABLE tblTIME(
--     C_TIME TIME, 
--     C_DATE DATE,
--     C_SMALLDATETIME SMALLDATETIME,
--     C_DATETIME DATETIME,
--     C_DATETIME2 DATETIME2,
--     C_DATETIMEOFFSET DATETIMEOFFSET
-- )

INSERT INTO tblTIME VALUES(GETDATE(),GETDATE(),GETDATE(),GETDATE(),GETDATE(),GETDATE())

SELECT ISDATE('10/09/2023') -- IT RETURN TRUE

SELECT ISDATE('KRISHNA') -- IT RETURN FALSE

SELECT ISDATE(GETDATE()) -- IT RETURN TRUE

SELECT ISDATE('2023-09-12 16:50:17:176') -- IT RETURN TRUE BUT IF NANO SECOND HAVE MORE PRECISION THEN IT WILL RETURN FALSE.

SELECT DAY('2023-09-12') -- IT WILL RETURN 12

SELECT MONTH('2023/09/12') -- IT WILL RETURN 9

SELECT YEAR(GETDATE()) -- IT WILL RETURN CURRENT YEAR

SELECT DATENAME(DAY,GETDATE()) -- IT WILL RETURN CURRENT DATE BUT IT RETURN IN NVARCHAR DATATYPE

SELECT DATENAME(WEEKDAY,GETDATE()) -- IT WILL RETURN MONDAY ,TUESDAY ETC ACCORDING TO THE CURRENT DATE

SELECT DATENAME(MONTH,'2001-09-10') -- IT WILL RETURN SEPTEMBER 

SELECT * FROM tblTIME

-- CREATE TABLE tblEMPLOYEEDOB(
--     ID INT NOT NULL PRIMARY KEY,
--     NAME NVARCHAR(50),
--     DATEOFBIRTH DATETIME
-- )

INSERT INTO tblEMPLOYEEDOB VALUES (4,'RITU','1997-09-29 11:45:56.560')

SELECT ID,[NAME],[DATEOFBIRTH],DATENAME(WEEKDAY,DATEOFBIRTH) AS DAY,MONTH(DATEOFBIRTH) AS MONTHNUMBER,
DATENAME(MONTH,DATEOFBIRTH) AS MONTHNAME,YEAR(DATEOFBIRTH) AS YEAR FROM tblEMPLOYEEDOB

SELECT DATEPART(WEEKDAY,'2001-09-09') -- IT WILL RETURN THE WEEKDAY IN INTEGER FORMAT WHILE DATENAME FUNCTION RETURN IT IN NVARCHAR FORMAT
SELECT DATENAME(WEEKDAY,'2001-09-09')

SELECT DATEADD(MONTH,1,'2001-09-10') -- IT WILL INCREMENT THE MONTH O/P IS 2001-10-10 00:00:00.000
SELECT DATEADD(DAY,5,'2001-09-27') -- IT WILL INCREMENT THE 5 DAY O/P IS 2001-10-92 00:00:00.000

SELECT DATEDIFF(MONTH,'2001-09-10','2001-09-11') -- IT WILL GIVE DIFFERENCE BETWEEN TWO DATE O/P IS 0
SELECT DATEDIFF(DAY,'2001-09-10','2001-10-11') -- IT WILL GIVE 31 . IT RETURN THE VALUE IN INTEGERS FORMAT

CREATE FUNCTION FNCOMPUTERAGE(@DOB DATETIME)
RETURNS NVARCHAR(50)
AS
BEGIN
DECLARE  @TMDATE DATETIME, @YEAR INT, @MONTHS INT, @DAYS INT 
SELECT @TMDATE = @DOB

SELECT @YEAR = DATEDIFF(YEAR,@TMDATE,GETDATE()) -
                CASE
                    WHEN (MONTH(@DOB) > MONTH(GETDATE())) OR (MONTH(@DOB) = MONTH(GETDATE()) AND DAY(@DOB)> DAY(GETDATE()))
                    THEN 1 ELSE 0
                END

SELECT @TMDATE = DATEADD(YEAR,@YEAR,@TMDATE)

SELECT @MONTHS = DATEDIFF(MONTH,@TMDATE,GETDATE())-
                CASE
                    WHEN DAY(@DOB)>DAY(GETDATE())
                    THEN 1 ELSE 0
                END

SELECT @TMDATE = DATEADD(MONTH,@MONTHS,@TMDATE)

SELECT @DAYS = DATEDIFF(DAY,@TMDATE,GETDATE())
DECLARE @AGE NVARCHAR(50)
SET @AGE = CAST(@YEAR AS NVARCHAR(4)) + ' YEARS ' + CAST(@MONTHS AS NVARCHAR(4)) + ' MONTHS ' + CAST(@DAYS AS NVARCHAR(4)) + ' DAYS '
RETURN @AGE
END

SELECT NAME,[dbo].FNCOMPUTERAGE(DATEOFBIRTH) FROM tblEMPLOYEEDOB 

SELECT ID,NAME,DATEOFBIRTH, CONVERT(NVARCHAR,DATEOFBIRTH,103) AS CONVERTEDDOB FROM tblEMPLOYEEDOB
-- CAST(EXPRESSION AS DATATYPE)  CONVERT(DATATYPE , EXPRESSION , STYLE)
SELECT CAST(GETDATE() AS DATE)
SELECT CONVERT(DATE,GETDATE())
SELECT CONVERT(NVARCHAR,GETDATE(),103)