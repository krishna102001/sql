-- DDL TRIGGERS (WHEN CREATE , ALTER , DROP(INDEXES , STORED PROCEDURE ,FUNCTION ETC) ARE CREATED IT FIRE DDL TRIGGERS)

--SYNTAX
-- CREATE TRIGGER [TRIGGERNAME]
-- ON [SCOPE(SERVER|DATABSE)]
-- FOR [EVENTTYPE1,EVENTTYPE2,...]
-- AS
-- BEGIN
--  ---- TRIGGER BODY
--  END

--SINGLE DDL EVENT

CREATE TRIGGER  TRYFIRST_TRIGGER
ON DATABASE
FOR CREATE_TABLE
AS
BEGIN
    PRINT 'NEW TABLE IS CREATED'
END

CREATE TABLE HELLO(
    ID INT 
)

-- MULTIPLE DDL EVENTS
ALTER TRIGGER SECONGTRY_TRIGGER
ON DATABASE
FOR CREATE_TABLE,ALTER_TABLE,DROP_TABLE
AS
BEGIN
    -- ROLLBACK
    PRINT 'YOU JUST CREATED, MODIFIED OR DELETED A TABLE TATA'
END

DROP TABLE HELLO 

DISABLE TRIGGER SECONGTRY_TRIGGER ON DATABASE -- IT WILL DISABLE THE TRIGGERING OF DDL EVENT
DISABLE TRIGGER TRYFIRST_TRIGGER ON DATABASE
DISABLE TRIGGER TR_SERVERSCOPETRIGGER ON ALL SERVER
-- IT WILL TRIGGER WHENEVER ANY WE RENAME THE TABLE NAME
CREATE TRIGGER TRRENAMETABLE
ON DATABASE
FOR RENAME
AS
BEGIN
    PRINT 'YOU JUST RENAME SOMETHING'
END

SP_RENAME 'HELLO','NEWHELLO' -- IT WILL CHANGE THE NAME OF TABLE FROM HELLO TO NEWHELLO


-- SERVER SCOPED DDL TRIGGER , IN THIS IT WILL APPLY ON SERVER WHICH MEANS THAT ALL DATABASE WILL GET THE TRIGGER

ALTER TRIGGER TR_SERVERSCOPETRIGGER
ON ALL SERVER
FOR CREATE_TABLE,ALTER_TABLE,DROP_TABLE
AS
BEGIN
    -- ROLLBACK
    PRINT 'YOU CANNOT CREATE, ALTER AND DROP A TABLE IN ANY DATABSE ON SERVER'
END

USE [SAMPLE] 
GO
CREATE TABLE HELLO(   -- IT WILL PREVENT THE CREATION OF HELLO TABLE IN ANY DATABASE PRESENT IN SERVER
    ID INT 
)


-- REMEMBER THAT THE SERVER SCOPED TRIGGER WILL FIRES FIRST THEN THE DATABASE TRIGGER


-- AUDIT TABLES CHANGES 
CREATE TRIGGER TR_AUDITTABLE
ON ALL SERVER
FOR CREATE_TABLE, ALTER_TABLE, DROP_TABLE
AS 
BEGIN 
    SELECT EVENTDATA()
END
-- TABLE TO SAVE ADUIT LOG
CREATE TABLE TR_AUDIT_TABLE_LOG(
    DATABASENAME NVARCHAR(250),
    TABLENAME NVARCHAR(250),
    EVENTTYPE NVARCHAR(250),
    LOGINNAME NVARCHAR(250),
    SQLCOMMAND NVARCHAR(2500),
    AUDITTIME DATETIME
)


ALTER TRIGGER TR_AUDITTABLE
ON ALL SERVER
FOR CREATE_TABLE, ALTER_TABLE, DROP_TABLE
AS 
BEGIN 
    DECLARE @EVENTDATA XML
    SELECT @EVENTDATA = EVENTDATA()

    INSERT INTO SAMPLE.DBO.TR_AUDIT_TABLE_LOG (DATABASENAME, TABLENAME, EVENTTYPE, LOGINNAME, SQLCOMMAND, AUDITTIME) VALUES(
        @EVENTDATA.value('(/EVENT_INSTANCE/DatabaseName)[1]','VARCHAR(250)'),
        @EVENTDATA.value('(/EVENT_INSTANCE/ObjectName)[1]','VARCHAR(250)'),
        @EVENTDATA.value('(/EVENT_INSTANCE/EventType)[1]','VARCHAR(250)'),
        @EVENTDATA.value('(/EVENT_INSTANCE/LoginName)[1]','VARCHAR(250)'),
        @EVENTDATA.value('(/EVENT_INSTANCE/TSQLCommand)[1]','VARCHAR(250)'),
        GETDATE()
    )
END

SELECT * FROM TR_AUDIT_TABLE_LOG


---  LOGON TRIGGER // IT WILL FIRE IN RESPONSE TO A LOGON EVENT. 
SELECT * FROM sys.dm_exec_sessions -- it will show the logon activity

SELECT is_user_process, original_login_name, * from sys.dm_exec_sessions order by login_time desc

CREATE TRIGGER TR_LOGONAUDIT
ON ALL SERVER
FOR LOGON
AS
BEGIN
    DECLARE @LOGINNAME NVARCHAR(100)
    SET @LOGINNAME = ORIGINAL_LOGIN()
    IF(SELECT COUNT(*) FROM sys.dm_exec_sessions WHERE is_user_process = 1 AND original_login_name = @LOGINNAME)>3
    BEGIN
        PRINT 'FOURTH CONNECTIONS OF '+ @LOGINNAME + ' BLOCKED'
        ROLLBACK
    END
END

EXECUTE sp_readerrorlog

DISABLE TRIGGER TR_LOGONAUDIT ON ALL SERVER